package org.csr.core.util;

import java.io.UnsupportedEncodingException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

import org.csr.core.util.io.IOUtil;

/**
 * @author caijin
 * 
 */
public abstract class Md5PwdEncoder {

	public static String encodePassword(String password) {
//		String saltedPass = mergePasswordAndSalt(rawPass, salt, false);
		MessageDigest messageDigest = getMessageDigest();
//		byte[] digest;
//		try {
//			digest = messageDigest.digest(saltedPass.getBytes("UTF-8"));
//		} catch (UnsupportedEncodingException e) {
//			throw new IllegalStateException("UTF-8 not supported!");
//		}
//		return new String(Hex.encodeHex(digest));
		try {
			messageDigest.reset();
			byte[] md5pswd = messageDigest.digest(password.getBytes("UTF-8"));

			return IOUtil.byteArrayToString(md5pswd);
		} catch (UnsupportedEncodingException uee) {
			throw new IllegalStateException("UTF-8 not supported!");
		}
	}

	public static boolean isPasswordValid(String encPass, String rawPass) {
		String pass1 = encPass;
		String pass2 = encodePassword(rawPass);
		return pass1.equals(pass2);
	}

	private static final MessageDigest getMessageDigest() {
		String algorithm = "md5";
		try {
			return MessageDigest.getInstance(algorithm);
		} catch (NoSuchAlgorithmException e) {
			throw new IllegalArgumentException("No such algorithm [" + algorithm + "]");
		}
	}

	/**
	 * Used by subclasses to extract the password and salt from a merged
	 * <code>String</code> created using
	 * {@link #mergePasswordAndSalt(String,Object,boolean)}.
	 * <p>
	 * The first element in the returned array is the password. The second
	 * element is the salt. The salt array element will always be present, even
	 * if no salt was found in the <code>mergedPasswordSalt</code> argument.
	 * </p>
	 * 
	 * @param mergedPasswordSalt
	 *            as generated by <code>mergePasswordAndSalt</code>
	 * 
	 * @return an array, in which the first element is the password and the
	 *         second the salt
	 * 
	 * @throws IllegalArgumentException
	 *             if mergedPasswordSalt is null or empty.
	 */
	private static String mergePasswordAndSalt(String password, Object salt,
			boolean strict) {
		if (password == null) {
			password = "";
		}
		if (strict && (salt != null)) {
			if ((salt.toString().lastIndexOf("{") != -1)
					|| (salt.toString().lastIndexOf("}") != -1)) {
				throw new IllegalArgumentException(
						"Cannot use { or } in salt.toString()");
			}
		}
		if ((salt == null) || "".equals(salt)) {
			return password;
		} else {
			return password + "{" + salt.toString() + "}";
		}
	}

	private static String salt = "PONY";

	public static String getSalt() {
		return salt;
	}

	public static void setSalt(String salt) {
		Md5PwdEncoder.salt = salt;
	}

	public static void main(String[] args) {
		System.out.println(Md5PwdEncoder.encodePassword("root123"));
	}
}
